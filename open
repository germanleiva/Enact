diff --git a/example.json b/example.json
new file mode 100644
index 0000000..96088ff
--- /dev/null
+++ b/example.json
@@ -0,0 +1 @@
+{"visualStates":[{"name":"VS1","shapes":{},"measures":[],"correspondingInputEventIndex":-1}],"inputEvents":[],"code":{"functions":["{\"id\":1,\"name\":\"isInside\",\"code\":\"function isInside({touch, shape}) {\\n        return shape.left < touch.x && shape.top < touch.y && shape.left + shape.width > touch.x && shape.top + shape.height > touch.y;\\n}\"}","{\"id\":2,\"name\":\"map\",\"code\":\"function map({input,\\n              output,\\n              min = Number.NEGATIVE_INFINITY,\\n              max = Number.POSITIVE_INFINITY,\\n              ratio = 1}) {\\n        output.applyDelta(input,min,max,ratio)\\n}\"}"],"states":["{\n\tid: '1',\n\tdescription: '',\n\tname: 'Idle',\n\tisSelected: true,\n\tisActive: false,\n\tx: 221.80623439448823,\n\ty: 265.1358056472429,\n\tenter: function (e) {/* This function is executed when we enter this state */},\n\texit: function (e) {/* This function is executed when we leave this state */},\n\n}","{\n\tid: '2',\n\tdescription: '',\n\tname: 'Moving',\n\tisSelected: false,\n\tisActive: false,\n\tx: 288.59275961929063,\n\ty: 91.40287752373033,\n\tenter: function (e) {/* This function is executed when we enter this state */},\n\texit: function (e) {/* This function is executed when we leave this state */},\n\n}"],"transitions":["{\n\tid: '1',\n\tdescription: '',\n\tname: 'touchstart',\n\tsource: '1',\n\ttarget: '2',\n\tguard: function (e) {\n            // Only when the guard is true the transition is executed\n            return true;\n        },\n\taction: function (e) {\n            // When the transition is executed this action is performed\n        },\n\tisSelected: false,\n\tisActive: false\n}","{\n\tid: '2',\n\tdescription: '',\n\tname: 'touchmove',\n\tsource: '2',\n\ttarget: '2',\n\tguard: function (e) {\n            // Only when the guard is true the transition is executed\n            return true;\n        },\n\taction: function (e) {\n            // When the transition is executed this action is performed\n        },\n\tisSelected: false,\n\tisActive: false\n}","{\n\tid: '3',\n\tdescription: '',\n\tname: 'touchend',\n\tsource: '2',\n\ttarget: '1',\n\tguard: function (e) {\n            // Only when the guard is true the transition is executed\n            return true;\n        },\n\taction: function (e) {\n            // When the transition is executed this action is performed\n        },\n\tisSelected: false,\n\tisActive: false\n}"]},"currentColor":"#b3b1f3"}
\ No newline at end of file
diff --git a/savedProjects/example.json b/savedProjects/example.json
new file mode 100644
index 0000000..a6ae3a6
--- /dev/null
+++ b/savedProjects/example.json
@@ -0,0 +1 @@
+{"shapeCounter":2,"measureCounter":1,"stateCounter":3,"transitionCounter":4,"functionCounter":5,"visualStates":[{"name":"VS1","shapes":{"S1":{"id":"S1","type":"rectangle","color":"#b3b1f3","top":110,"left":103,"width":184,"height":207,"opacity":1,"cornerRadius":""}},"measures":[],"currentInputEventIndex":0},{"name":"VS2","shapes":{"S1":{"id":"S1","type":"rectangle","color":"#b3b1f3","top":110,"left":103,"width":184,"height":207,"opacity":1,"cornerRadius":""}},"measures":[],"currentInputEventIndex":13},{"name":"VS3","shapes":{"S1":{"id":"S1","type":"rectangle","color":"#b3b1f3","top":308,"left":102,"width":184,"height":207,"opacity":1,"cornerRadius":""}},"measures":[],"currentInputEventIndex":26}],"inputEvents":[{"type":"touchstart","touches":[{"identifier":0,"x":170.66700744628906,"y":199.61900329589844,"radiusX":18.279428482055664,"radiusY":18.279428482055664,"force":0.6000000238418579}],"changedTouches":[{"identifier":0,"x":170.66700744628906,"y":199.61900329589844,"radiusX":18.279428482055664,"radiusY":18.279428482055664,"force":0.6000000238418579}],"timeStamp":61768.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":168.63600158691406,"y":201.10000610351562,"radiusX":35.15009307861328,"radiusY":35.15009307861328,"force":0.875}],"changedTouches":[{"identifier":0,"x":168.63600158691406,"y":201.10000610351562,"radiusX":35.15009307861328,"radiusY":35.15009307861328,"force":0.875}],"timeStamp":61794.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":166.34500122070312,"y":203.1790008544922,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":0.9375}],"changedTouches":[{"identifier":0,"x":166.34500122070312,"y":203.1790008544922,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":0.9375}],"timeStamp":61810.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":164.78900146484375,"y":205.77099609375,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":0.987500011920929}],"changedTouches":[{"identifier":0,"x":164.78900146484375,"y":205.77099609375,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":0.987500011920929}],"timeStamp":61827.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":164.7830047607422,"y":210.9199981689453,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.024999976158142}],"changedTouches":[{"identifier":0,"x":164.7830047607422,"y":210.9199981689453,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.024999976158142}],"timeStamp":61843.42},{"type":"touchmove","touches":[{"identifier":0,"x":168.96499633789062,"y":219.2989959716797,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.0750000476837158}],"changedTouches":[{"identifier":0,"x":168.96499633789062,"y":219.2989959716797,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.0750000476837158}],"timeStamp":61860.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":176.39999389648438,"y":230.41799926757812,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.125}],"changedTouches":[{"identifier":0,"x":176.39999389648438,"y":230.41799926757812,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.125}],"timeStamp":61876.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":185.6020050048828,"y":242.10899353027344,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.1375000476837158}],"changedTouches":[{"identifier":0,"x":185.6020050048828,"y":242.10899353027344,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.1375000476837158}],"timeStamp":61893.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":197.37899780273438,"y":255.5679931640625,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.1375000476837158}],"changedTouches":[{"identifier":0,"x":197.37899780273438,"y":255.5679931640625,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.1375000476837158}],"timeStamp":61910.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":209.63099670410156,"y":271.9440002441406,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.1375000476837158}],"changedTouches":[{"identifier":0,"x":209.63099670410156,"y":271.9440002441406,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.1375000476837158}],"timeStamp":61926.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":221.79100036621094,"y":289.5849914550781,"radiusX":35.15009307861328,"radiusY":35.15009307861328,"force":1.125}],"changedTouches":[{"identifier":0,"x":221.79100036621094,"y":289.5849914550781,"radiusX":35.15009307861328,"radiusY":35.15009307861328,"force":1.125}],"timeStamp":61943.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":230.49400329589844,"y":308.7409973144531,"radiusX":35.15009307861328,"radiusY":35.15009307861328,"force":1.1125000715255737}],"changedTouches":[{"identifier":0,"x":230.49400329589844,"y":308.7409973144531,"radiusX":35.15009307861328,"radiusY":35.15009307861328,"force":1.1125000715255737}],"timeStamp":61959.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":238.76300048828125,"y":327.0509948730469,"radiusX":35.15009307861328,"radiusY":35.15009307861328,"force":1.1125000715255737}],"changedTouches":[{"identifier":0,"x":238.76300048828125,"y":327.0509948730469,"radiusX":35.15009307861328,"radiusY":35.15009307861328,"force":1.1125000715255737}],"timeStamp":61976.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":247.85000610351562,"y":343.32000732421875,"radiusX":35.15009307861328,"radiusY":35.15009307861328,"force":1.100000023841858}],"changedTouches":[{"identifier":0,"x":247.85000610351562,"y":343.32000732421875,"radiusX":35.15009307861328,"radiusY":35.15009307861328,"force":1.100000023841858}],"timeStamp":61993.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":254.33900451660156,"y":357.8699951171875,"radiusX":32.73999786376953,"radiusY":32.73999786376953,"force":1.100000023841858}],"changedTouches":[{"identifier":0,"x":254.33900451660156,"y":357.8699951171875,"radiusX":32.73999786376953,"radiusY":32.73999786376953,"force":1.100000023841858}],"timeStamp":62009.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":259.9840087890625,"y":371.7770080566406,"radiusX":35.15009307861328,"radiusY":35.15009307861328,"force":1.125}],"changedTouches":[{"identifier":0,"x":259.9840087890625,"y":371.7770080566406,"radiusX":35.15009307861328,"radiusY":35.15009307861328,"force":1.125}],"timeStamp":62026.42},{"type":"touchmove","touches":[{"identifier":0,"x":266.9630126953125,"y":385.03399658203125,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.125}],"changedTouches":[{"identifier":0,"x":266.9630126953125,"y":385.03399658203125,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.125}],"timeStamp":62042.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":274.12298583984375,"y":399.4230041503906,"radiusX":35.15009307861328,"radiusY":35.15009307861328,"force":1.125}],"changedTouches":[{"identifier":0,"x":274.12298583984375,"y":399.4230041503906,"radiusX":35.15009307861328,"radiusY":35.15009307861328,"force":1.125}],"timeStamp":62059.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":278.4309997558594,"y":411.67401123046875,"radiusX":35.15009307861328,"radiusY":35.15009307861328,"force":1.125}],"changedTouches":[{"identifier":0,"x":278.4309997558594,"y":411.67401123046875,"radiusX":35.15009307861328,"radiusY":35.15009307861328,"force":1.125}],"timeStamp":62075.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":281.7170104980469,"y":422.8680114746094,"radiusX":35.15009307861328,"radiusY":35.15009307861328,"force":1.125}],"changedTouches":[{"identifier":0,"x":281.7170104980469,"y":422.8680114746094,"radiusX":35.15009307861328,"radiusY":35.15009307861328,"force":1.125}],"timeStamp":62092.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":284.28399658203125,"y":432.2799987792969,"radiusX":35.15009307861328,"radiusY":35.15009307861328,"force":1.1125000715255737}],"changedTouches":[{"identifier":0,"x":284.28399658203125,"y":432.2799987792969,"radiusX":35.15009307861328,"radiusY":35.15009307861328,"force":1.1125000715255737}],"timeStamp":62109.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":286.4209899902344,"y":438.6919860839844,"radiusX":35.15009307861328,"radiusY":35.15009307861328,"force":1.1125000715255737}],"changedTouches":[{"identifier":0,"x":286.4209899902344,"y":438.6919860839844,"radiusX":35.15009307861328,"radiusY":35.15009307861328,"force":1.1125000715255737}],"timeStamp":62125.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":287.7869873046875,"y":442.9570007324219,"radiusX":35.15009307861328,"radiusY":35.15009307861328,"force":1.1125000715255737}],"changedTouches":[{"identifier":0,"x":287.7869873046875,"y":442.9570007324219,"radiusX":35.15009307861328,"radiusY":35.15009307861328,"force":1.1125000715255737}],"timeStamp":62142.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":288.3810119628906,"y":445.84698486328125,"radiusX":35.15009307861328,"radiusY":35.15009307861328,"force":1.1125000715255737}],"changedTouches":[{"identifier":0,"x":288.3810119628906,"y":445.84698486328125,"radiusX":35.15009307861328,"radiusY":35.15009307861328,"force":1.1125000715255737}],"timeStamp":62158.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":288.5459899902344,"y":447.95001220703125,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.1125000715255737}],"changedTouches":[{"identifier":0,"x":288.5459899902344,"y":447.95001220703125,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.1125000715255737}],"timeStamp":62175.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":288.7619934082031,"y":448.91400146484375,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.1125000715255737}],"changedTouches":[{"identifier":0,"x":288.7619934082031,"y":448.91400146484375,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.1125000715255737}],"timeStamp":62191.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":288.7619934082031,"y":449.66400146484375,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.1375000476837158}],"changedTouches":[{"identifier":0,"x":288.7619934082031,"y":449.66400146484375,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.1375000476837158}],"timeStamp":62208.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":288.7619934082031,"y":450.4410095214844,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.1375000476837158}],"changedTouches":[{"identifier":0,"x":288.7619934082031,"y":450.4410095214844,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.1375000476837158}],"timeStamp":62225.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":288.7619934082031,"y":451.2070007324219,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.1375000476837158}],"changedTouches":[{"identifier":0,"x":288.7619934082031,"y":451.2070007324219,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.1375000476837158}],"timeStamp":62241.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":288.9259948730469,"y":451.80999755859375,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.1375000476837158}],"changedTouches":[{"identifier":0,"x":288.9259948730469,"y":451.80999755859375,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.1375000476837158}],"timeStamp":62258.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":289.14300537109375,"y":452.32501220703125,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.1375000476837158}],"changedTouches":[{"identifier":0,"x":289.14300537109375,"y":452.32501220703125,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.1375000476837158}],"timeStamp":62274.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":289.6199951171875,"y":452.6679992675781,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.1375000476837158}],"changedTouches":[{"identifier":0,"x":289.6199951171875,"y":452.6679992675781,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.1375000476837158}],"timeStamp":62291.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":289.52398681640625,"y":453.0199890136719,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.1375000476837158}],"changedTouches":[{"identifier":0,"x":289.52398681640625,"y":453.0199890136719,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.1375000476837158}],"timeStamp":62308.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":289.52398681640625,"y":453.4209899902344,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.1375000476837158}],"changedTouches":[{"identifier":0,"x":289.52398681640625,"y":453.4209899902344,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.1375000476837158}],"timeStamp":62324.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":289.52398681640625,"y":453.78399658203125,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.1375000476837158}],"changedTouches":[{"identifier":0,"x":289.52398681640625,"y":453.78399658203125,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.1375000476837158}],"timeStamp":62341.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":289.989990234375,"y":454.1809997558594,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.1375000476837158}],"changedTouches":[{"identifier":0,"x":289.989990234375,"y":454.1809997558594,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.1375000476837158}],"timeStamp":62357.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":290.4360046386719,"y":454.0950012207031,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.1375000476837158}],"changedTouches":[{"identifier":0,"x":290.4360046386719,"y":454.0950012207031,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.1375000476837158}],"timeStamp":62374.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":291.9110107421875,"y":454.0950012207031,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.125}],"changedTouches":[{"identifier":0,"x":291.9110107421875,"y":454.0950012207031,"radiusX":37.56018829345703,"radiusY":37.56018829345703,"force":1.125}],"timeStamp":62390.420000000006},{"type":"touchmove","touches":[{"identifier":0,"x":295.47198486328125,"y":452.6700134277344,"radiusX":35.15009307861328,"radiusY":35.15009307861328,"force":1.087499976158142}],"changedTouches":[{"identifier":0,"x":295.47198486328125,"y":452.6700134277344,"radiusX":35.15009307861328,"radiusY":35.15009307861328,"force":1.087499976158142}],"timeStamp":62407.42},{"type":"touchmove","touches":[{"identifier":0,"x":299.0480041503906,"y":445.7139892578125,"radiusX":20.689523696899414,"radiusY":20.689523696899414,"force":0.862500011920929}],"changedTouches":[{"identifier":0,"x":299.0480041503906,"y":445.7139892578125,"radiusX":20.689523696899414,"radiusY":20.689523696899414,"force":0.862500011920929}],"timeStamp":62419.420000000006},{"type":"touchend","touches":[],"changedTouches":[{"identifier":0,"x":299.0480041503906,"y":445.7139892578125,"radiusX":20.689523696899414,"radiusY":20.689523696899414,"force":0}],"timeStamp":62428.420000000006}],"stateMachine":{"functions":["{\"id\":1,\"name\":\"isInside\",\"code\":\"function isInside({touch, shape}) {\\n        return shape.left < touch.x && shape.top < touch.y && shape.left + shape.width > touch.x && shape.top + shape.height > touch.y;\\n}\"}","{\"id\":2,\"name\":\"map\",\"code\":\"function map({input,\\n              output,\\n              min = Number.NEGATIVE_INFINITY,\\n              max = Number.POSITIVE_INFINITY,\\n              ratio = 1}) {\\n        output.applyDelta(input,min,max,ratio)\\n}\"}","{\"id\":3,\"name\":\"unnamed1\",\"code\":\"function unnamed1() {\\n  //Write your new function here\\n  return 1\\n}\"}","{\"id\":4,\"name\":\"unnamed2\",\"code\":\"function unnamed2() {\\n  //Write your new function here\\n  return 2\\n}\"}"],"states":["{\n\tid: '1',\n\tdescription: '',\n\tname: 'Idle',\n\tisSelected: false,\n\tisActive: true,\n\tx: 382.36186082736225,\n\ty: 186.5037117161631,\n\tenter: function (e) {/* This function is executed when we enter this state */},\n\texit: function (e) {/* This function is executed when we leave this state */},\n\n}","{\n\tid: '2',\n\tdescription: '',\n\tname: 'Moving',\n\tisSelected: false,\n\tisActive: false,\n\tx: 208.6609963432816,\n\ty: 131.5140283763568,\n\tenter: function (e) {/* This function is executed when we enter this state */},\n\texit: function (e) {/* This function is executed when we leave this state */},\n\n}"],"transitions":["{\n\tid: '1',\n\tdescription: '',\n\tname: 'touchstart',\n\tsource: '1',\n\ttarget: '2',\n\tguard: function (e) {\n            // Only when the guard is true the transition is executed\n            return true;\n        },\n\taction: function (e) {\n            // When the transition is executed this action is performed\n        },\n\tisSelected: false,\n\tisActive: false\n}","{\n\tid: '2',\n\tdescription: '',\n\tname: 'touchmove',\n\tsource: '2',\n\ttarget: '2',\n\tguard: function (e) {\n            // Only when the guard is true the transition is executed\n            return true;\n        },\n\taction: function (e) {\n            // When the transition is executed this action is performed\n          $.map({input:$.T0.position,output:$.S1.position})\n        },\n\tisSelected: true,\n\tisActive: false\n}","{\n\tid: '3',\n\tdescription: '',\n\tname: 'touchend',\n\tsource: '2',\n\ttarget: '1',\n\tguard: function (e) {\n            // Only when the guard is true the transition is executed\n            return true;\n        },\n\taction: function (e) {\n            // When the transition is executed this action is performed\n        },\n\tisSelected: false,\n\tisActive: false\n}"]},"currentColor":"#b3b1f3"}
\ No newline at end of file
diff --git a/savedProjects/example1.json b/savedProjects/example1.json
new file mode 100644
index 0000000..b2ac2cd
--- /dev/null
+++ b/savedProjects/example1.json
@@ -0,0 +1 @@
+{"shapeCounter":2,"measureCounter":1,"stateCounter":3,"transitionCounter":4,"functionCounter":3,"visualStates":[{"name":"VS1","shapes":{"S1":{"id":"S1","type":"rectangle","color":"#b3b1f3","top":110,"left":103,"width":184,"height":207,"opacity":1,"cornerRadius":""}},"measures":[],"currentInputEventIndex":-1},{"name":"VS2","shapes":{"S1":{"id":"S1","type":"rectangle","color":"#b3b1f3","top":110,"left":103,"width":184,"height":207,"opacity":1,"cornerRadius":""}},"measures":[],"currentInputEventIndex":-1},{"name":"VS3","shapes":{"S1":{"id":"S1","type":"rectangle","color":"#b3b1f3","top":308,"left":102,"width":184,"height":207,"opacity":1,"cornerRadius":""}},"measures":[],"currentInputEventIndex":-1}],"inputEvents":[],"stateMachine":{"functions":["{\"id\":1,\"name\":\"isInside\",\"code\":\"function isInside({touch, shape}) {\\n        return shape.left < touch.x && shape.top < touch.y && shape.left + shape.width > touch.x && shape.top + shape.height > touch.y;\\n}\"}","{\"id\":2,\"name\":\"map\",\"code\":\"function map({input,\\n              output,\\n              min = Number.NEGATIVE_INFINITY,\\n              max = Number.POSITIVE_INFINITY,\\n              ratio = 1}) {\\n        output.applyDelta(input,min,max,ratio)\\n}\"}"],"states":["{\n\tid: '1',\n\tdescription: '',\n\tname: 'Idle',\n\tisSelected: true,\n\tisActive: false,\n\tx: 382.36186082736225,\n\ty: 186.5037117161631,\n\tenter: function (e) {/* This function is executed when we enter this state */},\n\texit: function (e) {/* This function is executed when we leave this state */},\n\n}","{\n\tid: '2',\n\tdescription: '',\n\tname: 'Moving',\n\tisSelected: false,\n\tisActive: false,\n\tx: 208.6609963432816,\n\ty: 131.5140283763568,\n\tenter: function (e) {/* This function is executed when we enter this state */},\n\texit: function (e) {/* This function is executed when we leave this state */},\n\n}"],"transitions":["{\n\tid: '1',\n\tdescription: '',\n\tname: 'touchstart',\n\tsource: '1',\n\ttarget: '2',\n\tguard: function (e) {\n            // Only when the guard is true the transition is executed\n            return true;\n        },\n\taction: function (e) {\n            // When the transition is executed this action is performed\n        },\n\tisSelected: false,\n\tisActive: false\n}","{\n\tid: '2',\n\tdescription: '',\n\tname: 'touchmove',\n\tsource: '2',\n\ttarget: '2',\n\tguard: function (e) {\n            // Only when the guard is true the transition is executed\n            return true;\n        },\n\taction: function (e) {\n            // When the transition is executed this action is performed\n        },\n\tisSelected: false,\n\tisActive: false\n}","{\n\tid: '3',\n\tdescription: '',\n\tname: 'touchend',\n\tsource: '2',\n\ttarget: '1',\n\tguard: function (e) {\n            // Only when the guard is true the transition is executed\n            return true;\n        },\n\taction: function (e) {\n            // When the transition is executed this action is performed\n        },\n\tisSelected: false,\n\tisActive: false\n}"]},"currentColor":"#b3b1f3"}
\ No newline at end of file
diff --git a/server.js b/server.js
index 71e4519..e6145af 100644
--- a/server.js
+++ b/server.js
@@ -3,7 +3,9 @@ var app = express();
 var http = require('http').Server(app);
 var io = require('socket.io')(http);
 var ip = require("ip");
-console.dir ( "CHACKINGASF => "+ ip.address() );
+const fs = require('fs');
+
+// console.dir ( "CHACKINGASF => "+ ip.address() );
 
 // var path    = require("path");
 // app.get('/', function (req, res) {
@@ -39,6 +41,18 @@ io.on('connection', function(socket){
   socket.on('disconnect', function(){
     console.log('user disconnected ' + socket.id);
   });
+  socket.on('message-save-file', function(data) {
+    // const content = JSON.stringify(data);
+
+    let filePath = "./savedProjects/" + data.fileName
+    fs.writeFile(filePath, JSON.stringify(data.content), 'utf8', function (err) {
+        if (err) {
+            return console.log(err);
+        }
+
+        console.log(`File ${filePath} was saved!`);
+    });
+  })
   socket.on('message-from-device',function(data) {
     // console.log('Received data from the device ' + socket.id + ', sending to Enact-tool');
 
diff --git a/src/App.vue b/src/App.vue
index 9c65e6a..6871688 100644
--- a/src/App.vue
+++ b/src/App.vue
@@ -36,7 +36,6 @@ export default {
     return {
         canvasWidth: globalStore.mobileWidth,
         canvasHeight: globalStore.mobileHeight,
-        deviceVisualState: new VisualStateModel()
     }
   },
   components: {
@@ -46,6 +45,10 @@ export default {
     CodeArea,
     VisualStateCanvas
   },
+  beforeCreate: function() {
+    debugger;
+    globalStore.socket.emit('message-from-desktop', { type: "CLEAN", message: {} })
+  },
   mounted: function() {
     globalBus.$on('message-from-device-MOBILE_INIT', function(data) {
         // console.log("TYPE OF EVENT " + data.message.type + " data: " + JSON.stringify(data))
@@ -61,8 +64,6 @@ export default {
         this.deviceVisualState.showAllInputEvents = isRecording
     }.bind(this));
 
-    globalStore.socket.emit('message-from-desktop', { type: "CLEAN", message: {} })
-
     globalBus.$on('message-from-device-SHAPE_CREATED',function(data) {
         //If the deviceVisualState has the shape then we edit else we create
         // console.log("SHAPE_CREATED json: " + JSON.stringify(data.shapeJSON))
@@ -208,7 +209,12 @@ export default {
 
   },
   computed: {
-
+    deviceVisualState: function() {
+        if (!globalStore.deviceVisualState) {
+            globalStore.deviceVisualState = new VisualStateModel()
+        }
+        return globalStore.deviceVisualState
+    }
   },
   methods: {
     mirrorDragged(event) {
diff --git a/src/components/CodeArea.vue b/src/components/CodeArea.vue
index bd5fc2e..9b8ac67 100644
--- a/src/components/CodeArea.vue
+++ b/src/components/CodeArea.vue
@@ -88,14 +88,6 @@ const acceptedInputTypes = ["text/diff-touch","text/diff-measure","text/diff-sha
 const acceptedOutputTypes = ["text/diff-shape"]
 
 
-globalStore.stateMachine = new StateMachine({isServer:true});
-
-let idleState = globalStore.stateMachine.insertNewState({name:'Idle'});
-let movingState = globalStore.stateMachine.insertNewState({name:'Moving'});
-idleState.isSelected = true;
-globalStore.stateMachine.insertNewTransition({name:'touchstart',source:idleState,target:movingState});
-globalStore.stateMachine.insertNewTransition({name:'touchmove',source:movingState,target:movingState});
-globalStore.stateMachine.insertNewTransition({name:'touchend',source:movingState,target:idleState});
 
 
 let orig = CodeMirror.hint.javascript;
@@ -154,7 +146,7 @@ CodeMirror.hint.javascript = function(editor,options) {
     // inner.list.push("$S3");
     for (let i=0; i < result.list.length; i++) {
         let currentText = result.list[i]
-        let stateMachineFunction = globalStore.stateMachine.functions.find((f) => f.name == currentText)
+        let stateMachineFunction = globalStore.stateMachine.functions.find(f => f.name == currentText)
         if (stateMachineFunction) {
             let match = /function\s(\w+)\(\s*(\{[\s\S]*\})\s*\)/.exec(stateMachineFunction.code)
             if (match) {
@@ -361,7 +353,7 @@ export default {
             editor.on("drop",this.dropOnCode);
 
             var scroller = editor.getScrollerElement();
-            scroller.addEventListener('mouseup', (e) => {
+            scroller.addEventListener('mouseup', e => {
                 var pos = editor.coordsChar({x: e.pageX, y: e.pageY});
                 var token = editor.getTokenAt(pos);
                 this.onEditorMouseUp(editor,e);
@@ -513,7 +505,7 @@ export default {
             }
         },
         unselectStateMachine(){
-            let unselect = (x) => x.isSelected = false
+            let unselect = x => x.isSelected = false
             this.stateMachine.states.forEach(unselect)
             this.stateMachine.transitions.forEach(unselect)
         },
@@ -568,6 +560,18 @@ export default {
             return this.stateMachine.selectedElement
         }
     },
+    beforeCreate: function() {
+        globalStore.stateMachine = new StateMachine({isServer:true});
+
+        let idleState = globalStore.stateMachine.insertNewState({name:'Idle'});
+        let movingState = globalStore.stateMachine.insertNewState({name:'Moving'});
+        idleState.isSelected = true;
+        globalStore.stateMachine.insertNewTransition({name:'touchstart',source:idleState,target:movingState});
+        globalStore.stateMachine.insertNewTransition({name:'touchmove',source:movingState,target:movingState});
+        globalStore.stateMachine.insertNewTransition({name:'touchend',source:movingState,target:idleState});
+
+        globalStore.stateMachine.initialize()
+    },
     mounted: function() {
         this.onSelectedState(this.currentlySelectedState)
 
@@ -581,6 +585,10 @@ export default {
                 this.stateMachine.activateTransition(transitionId)
             }
         }.bind(this));
+
+        globalBus.$on('DELETE-CODE',function(data) {
+            this.deleteAllTextMarkers()
+        }.bind(this));
     }
 }
 </script>
diff --git a/src/components/InputArea.vue b/src/components/InputArea.vue
index a71108d..943f941 100644
--- a/src/components/InputArea.vue
+++ b/src/components/InputArea.vue
@@ -21,8 +21,7 @@ export default {
   name: 'input-area',
   data () {
     return {
-        //TODO deprecated
-        toolbarState: globalStore.toolbarState
+
     }
   },
   components: {
diff --git a/src/components/PolygonShape.vue b/src/components/PolygonShape.vue
index 70f83a3..defa0a2 100644
--- a/src/components/PolygonShape.vue
+++ b/src/components/PolygonShape.vue
@@ -50,7 +50,6 @@ export default {
     props: ['shapeModel', 'parentVisualState','isTestShape'],
     data: function() {
         return {
-            visualState: this.parentVisualState,
             isHovered: false,
             isMoving: false
         }
@@ -145,7 +144,7 @@ export default {
             deep:true,
             handler: function(newVal,oldVal) {
             if (!this.isTestShape) {
-                if (globalStore.visualStates[0] === this.visualState) {
+                if (globalStore.visualStates[0] === this.parentVisualState) {
 
         //             let changes = {}
         //             for (let eachKey in newVal) {
@@ -238,22 +237,22 @@ export default {
 
 
                 //Snap to testShapes or previous state value
-                // let shapesToSnap = [...this.visualState.testShapes]
+                // let shapesToSnap = [...this.parentVisualState.testShapes]
 
-                // if (this.visualState.previousState) {
-                //     let previousShape = this.visualState.previousState.shapeFor(this.shapeModel.id)
+                // if (this.parentVisualState.previousState) {
+                //     let previousShape = this.parentVisualState.previousState.shapeFor(this.shapeModel.id)
                 //     if (previousShape) {
                 //         shapesToSnap.push(previousShape)
                 //     }
                 // }
 
-                for (let testShape of [...this.visualState.testShapes]) {
+                for (let testShape of [...this.parentVisualState.testShapes]) {
                     if (testShape.id == this.shapeModel.id) {
                         testShape.snapVertexPosition(newValue)
                     }
                 }
 
-                this.visualState.changeProperty(this.shapeModel,vertexId,previousValue,newValue)
+                this.parentVisualState.changeProperty(this.shapeModel,vertexId,previousValue,newValue)
 
             }.bind(this)
             let visualStateElement = this.$parent.canvasElement();
@@ -360,14 +359,14 @@ export default {
 
             //Snap to testShapes or previous state value
 
-            // if (this.visualState.previousState) {
-            //     let previousShape = this.visualState.previousState.shapeFor(this.shapeModel.id)
+            // if (this.parentVisualState.previousState) {
+            //     let previousShape = this.parentVisualState.previousState.shapeFor(this.shapeModel.id)
             //     if (previousShape) {
             //         shapesToSnap.push(previousShape)
             //     }
             // }
 
-            for (let testShape of [...this.visualState.testShapes]) {
+            for (let testShape of [...this.parentVisualState.testShapes]) {
                 if (testShape.id == this.shapeModel.id) {
                     if (Math.abs(newValue.x - testShape.position.x) < 5) {
                         newValue.x = testShape.position.x.valueOf()
@@ -382,7 +381,7 @@ export default {
             logger('previousValue: ' + JSON.stringify(previousValue));
             logger('newValue: ' + JSON.stringify(newValue));
             logger("---------");
-            this.visualState.changeProperty(this.shapeModel,'position',previousValue,newValue);
+            this.parentVisualState.changeProperty(this.shapeModel,'position',previousValue,newValue);
         },
         toggleSelection(notify = true) {
             this.shapeModel.isSelected = !this.shapeModel.isSelected;
@@ -413,7 +412,7 @@ export default {
                 console.log("dropForShape >> " + data)
                 let diffModel = new DiffModel(JSON.parse(data))
 
-                diffModel.applyDelta(this.visualState,this.shapeModel)
+                diffModel.applyDelta(this.parentVisualState,this.shapeModel)
                 this.shapeModel.highlight = false
             } else {
                 console.log("WEIRD, we accepted the drop but there is no data for us =(")
diff --git a/src/components/RectangleShape.vue b/src/components/RectangleShape.vue
index 976d74b..d26b09e 100644
--- a/src/components/RectangleShape.vue
+++ b/src/components/RectangleShape.vue
@@ -55,7 +55,6 @@ export default {
     props: ['shapeModel', 'parentVisualState','isTestShape'],
     data: function() {
         return {
-            visualState: this.parentVisualState,
             isHovered: false,
             isMoving: false
         }
@@ -135,7 +134,7 @@ export default {
         styleObject: function(newVal,oldVal) {
             if (!this.isTestShape && this.shapeModel) {
 
-                if (globalStore.visualStates[0] === this.visualState) {
+                if (globalStore.visualStates[0] === this.parentVisualState) {
 
                     let changes = {}
                     for (let eachKey in newVal) {
@@ -147,7 +146,7 @@ export default {
                             }
                         }
                     }
-                    // console.log("message-from-desktop EDIT_SHAPE")
+                    console.log("message-from-desktop EDIT_SHAPE")
                     globalStore.socket.emit('message-from-desktop', { type: "EDIT_SHAPE", id: this.shapeModel.id, message: changes })
                }
             } else {
@@ -321,8 +320,8 @@ export default {
 
             let previousValue = { x: this.shapeModel.position.x, y: this.shapeModel.position.y };
             let newValue = {
-                x: Math.min(Math.max(currentWindowMousePositionX - initialOffsetX, 0), this.visualState.maxWidth),
-                y: Math.min(Math.max(currentWindowMousePositionY - initialOffsetY, 0), this.visualState.maxHeight)
+                x: Math.min(Math.max(currentWindowMousePositionX - initialOffsetX, 0), this.parentVisualState.maxWidth),
+                y: Math.min(Math.max(currentWindowMousePositionY - initialOffsetY, 0), this.parentVisualState.maxHeight)
             }
 
             //Snap to testShapes or previous state value
@@ -334,7 +333,7 @@ export default {
             //     }
             // }
 
-            for (let testShape of [...this.visualState.testShapes]) {
+            for (let testShape of [...this.parentVisualState.testShapes]) {
                 if (testShape.id == this.shapeModel.id) {
                     if (Math.abs(newValue.x - testShape.position.x) < 5) {
                         logger('insideTheX testing')
@@ -351,7 +350,7 @@ export default {
             logger('previousValue: ' + JSON.stringify(previousValue));
             logger('newValue: ' + JSON.stringify(newValue));
             logger("---------");
-            this.visualState.changeProperty(this.shapeModel,'position',previousValue,newValue);
+            this.parentVisualState.changeProperty(this.shapeModel,'position',previousValue,newValue);
         },
         toggleSelection(notify = true) {
             this.shapeModel.isSelected = !this.shapeModel.isSelected;
@@ -453,7 +452,7 @@ export default {
                 }
             }
 
-            for (let testShape of this.visualState.testShapes) {
+            for (let testShape of this.parentVisualState.testShapes) {
                 if (testShape.id == this.shapeModel.id) {
                     testShape.snap(this.shapeModel.position,newValue)
                 }
@@ -464,8 +463,8 @@ export default {
             } else {
                 this.shapeModel.width = newValue.width;
                 this.shapeModel.height = newValue.height;
-                if (this.visualState.nextState) {
-                    this.visualState.nextState.somethingChangedPreviousState(this.shapeModel.id, previousValue, newValue, 'size');
+                if (this.parentVisualState.nextState) {
+                    this.parentVisualState.nextState.somethingChangedPreviousState(this.shapeModel.id, previousValue, newValue, 'size');
                 }
             }
         },
@@ -489,7 +488,7 @@ export default {
                 console.log("dropForShape >> " + data)
                 let diffModel = new DiffModel(JSON.parse(data))
 
-                diffModel.applyDelta(this.visualState,this.shapeModel,event.altKey)
+                diffModel.applyDelta(this.parentVisualState,this.shapeModel,event.altKey)
                 this.shapeModel.highlight = false
             } else {
                 console.log("WEIRD, we accepted the drop but there is no data for us =(")
diff --git a/src/components/TextMark.vue b/src/components/TextMark.vue
index b365b53..362e0b6 100644
--- a/src/components/TextMark.vue
+++ b/src/components/TextMark.vue
@@ -56,7 +56,7 @@ export default {
             return `$.${this.objectId}`
         },
         object() {
-            let parentVisualState = globalStore.visualStates.find((vs) => vs.name == this.visualStateId)
+            let parentVisualState = globalStore.visualStates.find(vs => vs.name == this.visualStateId)
             return parentVisualState.objectFor(this.objectId)
         },
         hardcodedValue() {
diff --git a/src/components/Toolbar.vue b/src/components/Toolbar.vue
index e774c76..ebe28f9 100644
--- a/src/components/Toolbar.vue
+++ b/src/components/Toolbar.vue
@@ -1,11 +1,12 @@
 <template>
     <div id="toolbar">
+        <input id="file-input" type="file" name="name" style="display: none;" @change="fileLoaded" value="./savedProjects/example.json"/>
         <div class="control is-grouped">
             <a class="button is-primary is-alone is-disabled" title="A Tool to Create Interaction" id="title">ENACT</a>
             <p class="control has-addons">
-                
-                <a class="button" title="Selection" v-on:click="openFile"><span class="icon is-small"><i class="fa fa-folder-open-o"></i></span></a>
-                <a class="button" title="Selection" v-on:click="saveFile"><span class="icon is-small"><i class="fa fa-floppy-o "></i></span></a>
+
+                <a class="button" title="Open Project" v-on:click="openFile"><span class="icon is-small"><i class="fa fa-folder-open-o"></i></span></a>
+                <a class="button" title="Save Project" v-on:click="saveFile"><span class="icon is-small"><i class="fa fa-floppy-o "></i></span></a>
             </p>
 
             <p class="control has-addons">
@@ -25,14 +26,13 @@
 
 import {extendArray} from '../collections.js'
 extendArray(Array);
-import {globalStore,globalBus} from '../store.js'
+import {globalStore,globalBus, InputEvent, VisualStateModel} from '../store.js'
 
 export default {
   name: 'toolbar',
   data () {
     return {
         toolbarState: globalStore.toolbarState,
-        currentColor: '#f0f0f0'
     }
   },
     methods: {
@@ -59,11 +59,137 @@ export default {
             globalBus.$emit('changeColorOfSelectedShapes',this.currentColor)
         },
         openFile(){
+            let fileInput = document.getElementById('file-input');
+            fileInput.value = "";
+            fileInput.click();
+        },
+        fileLoaded(e) {
+            let file = document.getElementById('file-input').files[0]
+
+            let jsonType = /^application\/json/;
+
+            if (!jsonType.test(file.type)) {
+              return
+            }
+
+            let reader = new FileReader();
+            reader.onabort = e => console.log ("file reader aborted");
+            reader.onerror = e => alert("There was an error while reading this file");
+            reader.onload = e => {
+                console.log("ONLOAD")
+
+                let json = JSON.parse(e.target.result);
+
+                //Delete everything first
+                Array.from(globalStore.visualStates).reverse().forEach(vs => {
+                    vs.deleteYourself();
+                    globalStore.visualStates.remove(vs)
+                })
+                globalStore.deviceVisualState.deleteYourself();
+                globalStore.deviceVisualState = new VisualStateModel()
+
+                Array.from(globalStore.inputEvents).forEach(inputEvent => {
+                    inputEvent.deleteYourself()
+                    globalStore.inputEvents.remove(inputEvent)
+                })
+                globalBus.$emit("DELETE-CODE");
+                globalStore.stateMachine.deleteYourself();
+
+                globalStore.socket.emit('message-from-desktop', { type: "CLEAN", message: {} })
+
+                //Load everything
+
+                globalStore.shapeCounter = json.shapeCounter;
+                globalStore.measureCounter = json.measureCounter;
+                globalStore.stateCounter = json.stateCounter;
+                globalStore.transitionCounter = json.transitionCounter;
+                globalStore.functionCounte = json.functionCounter;
+
+                globalStore.toolbarState.currentColor = json.currentColor;
+
+                for (let eventDesc of json.inputEvents) {
+                    globalStore.inputEvents.push(new InputEvent(eventDesc))
+                }
+
+                //We create all the visual states
+                let createdVisualStates = []
+                for (let vsDesc of json.visualStates) {
+                    let newVisualState = globalStore.addVisualState()
 
+                    newVisualState.currentInputEventIndex = vsDesc.currentInputEventIndex
+                    createdVisualStates.push(newVisualState)
+                }
+                //Only after all the visual states are created we add shapes/measures/etc
+                for (let i=0;i<json.visualStates.length;i++) {
+                    let vsDesc = json.visualStates[i]
+                    let newVisualState = createdVisualStates[i]
+                    for (let shapeKey in vsDesc.shapes) {
+                        let shapeDesc = vsDesc.shapes[shapeKey]
+                        let newShape = newVisualState.shapeFor(shapeKey)
+                        if (!newShape) {
+                            newShape = newVisualState.addNewShape(shapeDesc.type,shapeKey)
+                            newShape.fromJSON(shapeDesc)
+
+                            if (newVisualState.nextState) {
+                                newVisualState.nextState.didCreateShape(newShape, newVisualState);
+                            }
+
+                            if (globalStore.visualStates[0] === newVisualState) {
+                                globalStore.newShapeCreated(newShape);
+                            }
+                        } else {
+                            newShape.fromJSON(shapeDesc)
+                        }
+                    }
+                    for (let measureDesc of vsDesc.measures) {
+                        newVisualState.addNewMeasureUntilLastState(measureDesc.idCount,measureDesc.from.type, measureDesc.from.id, measureDesc.from.handler, measureDesc.to.type, measureDesc.to.id, measureDesc.to.handler)
+                    }
+                }
+
+                globalStore.stateMachine.fromJSON(json.stateMachine)
+            };
+            reader.readAsText(file);
         },
         saveFile(){
+            //http://s2.quickmeme.com/img/31/3121eb7d9f72877ae27bf1c99be2c79de4c0e9dd4755a89956047efdc95efbcd.jpg
 
-        },
+            //Let's save all the visualStates
+
+            let jsonFile = {
+                shapeCounter:globalStore.shapeCounter,
+                measureCounter:globalStore.measureCounter,
+                stateCounter:globalStore.stateCounter,
+                transitionCounter:globalStore.transitionCounter,
+                functionCounter:globalStore.functionCounter
+            }
+
+            jsonFile.visualStates = []
+
+            for (let vs of globalStore.visualStates) {
+                jsonFile.visualStates.push(vs.toJSON())
+            }
+
+            //Let's save all the events
+
+            jsonFile.inputEvents = []
+            for (let inputEvent of globalStore.inputEvents) {
+                jsonFile.inputEvents.push(inputEvent.leanJSON)
+            }
+
+            //Let's save all the code
+            jsonFile.stateMachine = globalStore.stateMachine.toJSON()
+
+            //Let's save the currentColor
+            jsonFile.currentColor = globalStore.toolbarState.currentColor
+
+            globalStore.socket.emit('message-save-file', { fileName: "example.json", content: jsonFile })
+
+        }
+    },
+    computed: {
+        currentColor: function() {
+            return globalStore.toolbarState.currentColor
+        }
     },
     created: function() {
         globalStore.addVisualState();
diff --git a/src/components/VisualStateCanvas.vue b/src/components/VisualStateCanvas.vue
index bc7108e..e9ada69 100644
--- a/src/components/VisualStateCanvas.vue
+++ b/src/components/VisualStateCanvas.vue
@@ -110,12 +110,12 @@ export default {
             let sharedCachedFinalPosition = {x: e.pageX  - this.canvasOffsetLeft(), y: e.pageY  - this.canvasOffsetTop()}
 
             //TODO this is nasty, sorry future Germán
-            let presentAndFutureMeasures = this.visualStateModel.addNewMeasureUntilLastState(fromEntityType,fromId,fromHandlerName,undefined,undefined,undefined, sharedCachedFinalPosition)
+            let presentAndFutureMeasures = this.visualStateModel.addNewMeasureUntilLastState(undefined,fromEntityType,fromId,fromHandlerName,undefined,undefined,undefined, sharedCachedFinalPosition)
 
             //Let's add the measure to the deviceVisualState
             //TODO AWFUL!!!
             let currentDeviceVisualState = this.$root.$children[0].deviceVisualState
-            let aDeviceMeasure = currentDeviceVisualState.addNewMeasureUntilLastState(fromEntityType,fromId,fromHandlerName,undefined,undefined,undefined, sharedCachedFinalPosition)[0]
+            let aDeviceMeasure = currentDeviceVisualState.addNewMeasureUntilLastState(undefined,fromEntityType,fromId,fromHandlerName,undefined,undefined,undefined, sharedCachedFinalPosition)[0]
             presentAndFutureMeasures.push(aDeviceMeasure)
 
             let newMeasure = presentAndFutureMeasures[0]
diff --git a/src/mobile.js b/src/mobile.js
index 8a96755..7da3f4c 100644
--- a/src/mobile.js
+++ b/src/mobile.js
@@ -71,7 +71,7 @@ globalStore.mobileCanvasVM = mobileCanvasVM
 //         return foundShape.shapeModel
 //     }
 
-//     let foundFunction = target.functions.find((f) => f.name == key)
+//     let foundFunction = target.functions.find(f => f.name == key)
 //     if (foundFunction) {
 //         return foundFunction.func
 //     }
@@ -94,6 +94,7 @@ globalStore.mobileCanvasVM = mobileCanvasVM
 let stateMachine = new StateMachine({isServer:false})//proxyStateMachine
 window.stateMachine = stateMachine //For debugging in the developer tools
 window.mobileCanvasVM = mobileCanvasVM //For debugging in the developer tools
+window.globalStore = globalStore //For debugging in the developer tools
 
 $ = stateMachine.globalScope
 
@@ -263,17 +264,28 @@ function createShapeVM(id, message) {
 }
 
 globalStore.socket.on('message-from-server', function(data) {
-    // console.log("Received something from server: " + JSON.stringify(data));
+    console.log("Received something from server: " + JSON.stringify(data));
     switch(data.type) {
         case "CLEAN":{
-            let allKeys = []
-            for (let eachShapeKey in mobileCanvasVM.interactiveShapes) {
-                allKeys.push(eachShapeKey)
-            }
-            for (let shapeId of allKeys) {
+            console.log("Cleaning up ... aka deleting everything")
+
+            for (let shapeId of Object.keys(mobileCanvasVM.interactiveShapes)) {
                 deleteRectangleVM(shapeId)
             }
 
+            for (let aMeasure of mobileCanvasVM.measures) {
+                aMeasure.deleteYourself()
+            }
+
+            if (mobileCanvas.currentInputEvent) {
+                mobileCanvas.currentInputEvent.deleteYourself()
+                mobileCanvas.currentInputEvent = undefined;
+            }
+
+            mobileCanvas.hardcodedValues = {}
+
+            // stateMachine.deleteYourself()
+
             break;
         }
         case "START_RECORDING":{
@@ -368,6 +380,24 @@ globalStore.socket.on('message-from-server', function(data) {
             stateMachine.insertNewTransition(jsonTransitionData)
             break;
         }
+        case "MACHINE_DELETED": {
+            stateMachine.deleteYourself()
+            break;
+        }
+        case "MACHINE_DELETED_FUNCTION": {
+            let functionToDelete = stateMachine.findFunctionId(data.id)
+            if (functionToDelete) {
+                functionToDelete.deleteYourself()
+            }
+            break;
+        }
+        case "MACHINE_DELETED_STATE": {
+            let stateToDelete = stateMachine.findStateId(data.id)
+            if (stateToDelete) {
+                stateToDelete.deleteYourself()
+            }
+            break;
+        }
         case "MACHINE_CHANGED_STATE": {
             try {
                 let changedStateData;
@@ -391,6 +421,13 @@ globalStore.socket.on('message-from-server', function(data) {
             }
             break;
         }
+        case "MACHINE_DELETED_TRANSITION": {
+            let transitionToDelete = stateMachine.findTransitionId(data.id)
+            if (transitionToDelete) {
+                transitionToDelete.deleteYourself()
+            }
+            break;
+        }
         case "MACHINE_CHANGED_TRANSITION": {
             try {
                 let changedTransitionData;
diff --git a/src/statemachine.js b/src/statemachine.js
deleted file mode 100644
index 6776d1f..0000000
--- a/src/statemachine.js
+++ /dev/null
@@ -1,311 +0,0 @@
-export {StateMachine,logError,logSM,logEvent,logTouch,trim,log}
-	// Logging function to trace the action
-	var logging = true;
-	function log(msg) {
-		if (/*socket &&*/ logging) {
-			// socket.emit("log", msg);
-			console.log(msg)
-		}
-	}
-	var logFilter = {
-		Error:	true,
-		SM:		true,
-		Event:	true,
-		Touch:	true,
-	};
-	function logError(msg)	{if (logFilter.Error) log ("*** "+msg)}
-	function logSM(msg)		{ if (logFilter.SM) log(msg); }
-	function logEvent(msg)	{ if (logFilter.Event) log(msg); }
-	function logTouch(msg)	{ if (logFilter.Touch) log(msg); }
-
-	// trim whitespace around a string
-	function trim(str) {return str.replace(/^\s\s*/, '').replace(/\s\s*$/, '');}
-
-	/** function StateMachine(description)
-	Creates a state machine.'description' is an object containing:
-		- local properties of the machine;
-		- an optional property called 'actions', containing functions that may be called by the machine;
-		- a property called 'states', containing a description of the states.
-			Each state is itself an object, containing the description of the transitions.
-				Each transition must be a property whose name starts with 'on'.
-				A transition is an object holding the following optional properties:
-					- A 'guard' property, holding a function called to decide if the transition should fire;
-					- An 'action' property, holding a function to be called when the transition fires;
-					- A 'to' property, holding the name of the destination state.
-				A transition can also be an array of such objects, in which case they are tried in sequence
-				until one fires (this is only useful when using guards).
-			A state can also contain functions in their 'enter' and 'exit' properties
-			these are called when that state becomes active and stops being active, respectively
-
-	Actions and guards can be replaced by a string holding the name of a guard or action
-	in the 'actions' property, making the transitions easier to read, e.g.:
-		states: {
-			...
-			on_mouseup: {
-				guard: function(event) {
-					...
-				}
-				action: function(event) {
-					...
-				}
-				to: 'start'
-			}
-		}
-	becomes
-		actions: {
-			movedSome: function(event) {
-				...
-				},
-			endDrag: function(event) {
-				...
-			}
-		},
-		states: {
-			...
-			drag: {
-				on_mouseup: {
-					guard: 'movedSome',
-					action: 'endDrag',
-					to: 'start',
-				}
-			}
-		}
-
-	Going one step further, a transition object can be replaced by a string of the form:
-		'guard ? action -> to'
-	where guard, action and to are the names of the guard, action and destination state.
-	Each part is optional. If [] denotes an optional part, then the allowed syntax is:
-		[guard ?] [action] [-> to]
-	For the example above, we'd get
-		states: {
-			...
-			drag: {
-				on_mouseup: 'movedSome? endDrag -> start',
-			}
-		}
-
-	Finally, enter and exit actions of a state can also be specified by the name of an action, e.g.:
-		drag: {
-			enter: 'drawShadow',
-		}
-
-	Note that if a transition does not specify a destination state (no property 'to'),
-	the machine stays in the same state when the transition fires, but the enter and exit actions
-	are not called. If you want these actions to be called, specify the 'to' property:
-		drag: {
-			enter: 'drawShadow',
-			on_mousemove: 'doDrag',	// enter action not called
-		}
-	but
-		drag: {
-			enter: 'drawShadow',
-			on_mousemove: 'doDrag -> drag',	// enter action called
-		}
-		}
-	**/
-
-	function StateMachine(description) {
-		// First copy the description in the new object
-		var machine = this;
-		for (var property in description) {
-			var value = description[property];
-			this[property] = value;
-		}
-
-		// Then add the 'machine' property to each state,
-		// and a 'machine' and 'state' property to each transition
-		// Also add a 'name' property to states and transitions, unless one is defined
-		for (var stateName in this.states) {
-			var state = this.states[stateName];
-			if (! this.firstState)
-				this.firstState = state;
-			state.machine = this;
-			if (! state.name)
-				state.name = stateName;
-
-			// If the entry is not a string, return it.
-			// If the entry is a string, return the value in the table
-			// or throw an exception if it is not there
-			function resolve(entry, table, message) {
-				if (typeof entry != "string")
-					return entry;
-				var value = table[entry];
-				if (value)
-					return value;
-				throw message+" undefined in state machine: "+entry;
-			}
-
-			// 'Compile' a transition:
-			//		Analyze it if defined as a string,
-			//		resolve the action and guard names if any,
-			//		add the name, state and machine properties.
-			function initTransition(transition, name) {
-				if (typeof transition == 'string') {
-					// parse 'guard ? action -> state' where each section is optional
-					// (action must be present if guard is specified)
-					var pattern = /^\s*(?:(\w+)\s*\?\s*)?(\w+)?(?:\s*->\s*(\w+))?\s*$/;
-					var result = transition.match(pattern);
-					transition = {};
-
-					if (! result) throw "Incorrect transition in state machine: "+transition;
-					if (result[1]) transition.guard = result[1];
-					if (result[2]) transition.action = result[2];
-					if (result[3]) transition.to = result[3];
-				}
-
-				if (! transition.name)
-					transition.name = name;
-				transition.state = state;
-				transition.machine = machine;
-				// resolve guard and action names to machine properties
-				if (transition.action)
-					transition.action = resolve(transition.action, machine.actions, "Action");
-				if (transition.guard)
-					transition.guard = resolve(transition.guard, machine.actions, "Guard")
-				if (transition.to)
-					transition.to = resolve(transition.to, machine.states, "State");
-
-				return transition;
-			}
-
-			// 'Compile' a state:
-			//		compile its transitions (identified by their 'on' prefix).
-			//		compile the enter and exit actions, if any
-			for (var transName in state) {
-				if (! transName.indexOf('on') == 0)
-					continue;
-
-				var transitions = state[transName];
-				if (typeof transitions == 'string' || ! transitions.length)
-					state[transName] = initTransition(transitions, transName);
-				else // case where we have a list of transitions
-					for (var t = 0; i < transitions.length; t++)
-						transitions[t] = initTransition(transitions[t], transName);
-			}
-			if (state.enter)
-				state.enter = resolve(state.enter, machine.actions, "Enter action");
-			if (state.exit)
-				state.exit = resolve(state.exit, machine.actions, "Enter action");
-		}
-
-		// start machine in initial state
-		this.currentState = this.firstState;
-	}
-
-	/** StateMachine::processEvent(type, event)
-	Method called to run one step of the state machine.
-	'type' is the type of transition to be fired,
-	'event' is an arbitrary object passed to all the guards and actions.
-
-	processEvent looks for a transition of the given type in the current state.
-	If it finds one, it attempt to fire it by calling its guard, if any.
-	If there is no guard or the guard returns true, it calls the exit action of the current state if any,
-	the transition action if any, and the enter state of the destination state if any.
-	(if a destination state is not specified, the machine stays in the same state
-	and the enter and exit actions are not called).
-
-	If the transition being considered is an array, its elements are tried in order until one fires
-	or the array is exhausted.
-
-	If a transition fired, processEvent returs true, in all other cases it returns false.
-
-	If an error occurs in a guard or action, it is ignored and an error message is logged.
-	This is achieved by calling the logError function, which can be redefined.
-
-	The guard, enter, exit and transition actions are all called with 'this' set to the machine,
-	and with three arguments: the event passed to processEvent, the transition that fired and the current state.
-	This allows actions to easily access any information stored in the transition, state or machine.
-	**/
-	StateMachine.prototype.processEvent = function (type, event) {
-		var machine = this;
-		var state = this.currentState;
-
-		if (! state)
-			return false;
-
-		var transitions = state['on_'+type];
-		//logSM('processEvent '+type+' in state '+ state.name);
-		if (! transitions) {
-			logSM('['+state.name+'] -- '+type+' -> no transition');
-			return false;
-		}
-
-		// This function fires a transition, returning true if it did,
-		// false otherwise (i.e. if a guard returned false or failed)
-		function processTransition(transition) {
-			// call the guard, if any
-			if (transition.guard)
-			 	try {
-					if (! transition.guard.call(machine, event, transition, state))
-						return false;
-				} catch (e) {
-					logError("ignoring error in guard (skipping transition): "+e);
-					return false;
-				}
-
-
-			// call the exit action of the current state, if any
-			var dest = transition.to;
-			logSM('['+state.name+'] -- '+type+' -> '+(dest? ('['+dest.name+']') : 'same state'));
-			if (dest && state.exit)
-				try {
-					state.exit.call(machine, event, transition, state);
-				} catch(e) {
-					logError("ignoring error in state exit action: "+e);
-				}
-			// call the transition action, if any
-			if (transition.action)
-				try {
-					transition.action.call(machine, event, transition, state);
-				} catch(e) {
-					logError("ignoring error in transition action: "+e);
-				}
-
-			// set the new current state and call the enter action of the destination state, if any
-			if (dest) {
-				transition.machine.currentState = dest;
-				if (dest.enter)
-					try {
-						dest.enter.call(machine, event, transition, state);
-					} catch(e) {
-						logError("ignoring error in state enter action: "+e);
-					}
-			}
-
-			return true;
-		}
-
-		// single transition
-		if (!transitions.length)
-			return processTransition(transitions);
-
-		// array of transitions: try them in turn
-		for (var i = 0; i < transitions.length; i++)
-			if (processTransition(transitions[i]))
-				return true;
-
-		// if we get there, nothing fired
-		// logSM('  no transition');
-		logSM('['+state.name+'] -- '+type+' -> no active transition');
-		return false;
-	}
-
-	/**
-	Create and cancel timeout events.
-	This version only manages one active timer.
-	**/
-	StateMachine.prototype.armTimeout = function (delay) {
-		if (this._timer)
-			this.cancelTimeout;
-		var machine = this;
-		this._timer = setTimeout(function() {
-			machine.processEvent('timeout', null);
-		}, delay);
-	}
-
-	StateMachine.prototype.cancelTimeout = function () {
-		if (this._timer) {
-			clearTimeout(this._timer);
-			delete this._timer;
-		}
-	}
diff --git a/src/store.js b/src/store.js
index 712dbae..f553292 100644
--- a/src/store.js
+++ b/src/store.js
@@ -18,7 +18,7 @@ import _ from 'lodash';
 import tinyColor from 'tinycolor2';
 import JSONfn from 'json-fn';
 
-let isLoggerActive = true;
+let isLoggerActive = false;
 let logger = function(text) {
     if (isLoggerActive) {
         console.log(text);
@@ -33,6 +33,7 @@ export const globalStore = new Vue({
     data: {
         mobileCanvasVM: undefined,
         visualStates: [],
+        deviceVisualState: undefined,
         inputEvents: [],
         isRecording: false,
         shapeCounter: 1,
@@ -52,7 +53,7 @@ export const globalStore = new Vue({
             measureMode: false,
             shapeType: 'rectangle',
             currentLink: undefined,
-            currentColor: '#f0F0F0',
+            currentColor: '#b3b1f3',
         },
         cursorType: 'auto',
         context: undefined,
@@ -110,6 +111,8 @@ export const globalStore = new Vue({
             //TODO DRY
             let correspondingIndex = Math.floor(newVisualState.percentageInTimeline / 100 * (globalStore.inputEvents.length -1))
             newVisualState.currentInputEvent = globalStore.inputEvents[correspondingIndex]
+
+            return newVisualState
         },
         newShapeCreated(aShapeModel) {
             this.stateMachine.addShape(aShapeModel)
@@ -187,7 +190,7 @@ export const globalStore = new Vue({
                 let aPreviousShape = previousVisualState.shapesDictionary[previousShapeId]
                 let aNewShape = newVisualState.shapesDictionary[previousShapeId]
                 if (aNewShape) {
-                    for (let eachProperty of ['color','position','size']) {
+                    for (let eachProperty of aNewShape.allProperties) {
                         if (aPreviousShape.areEqualValues(eachProperty,aPreviousShape[eachProperty],aNewShape[eachProperty])) {
                             aNewShape.followMaster(eachProperty)
                         }
@@ -206,7 +209,7 @@ export const globalStore = new Vue({
                     let aNewShape = newVisualState.shapesDictionary[nextShapeId]
 
                     if (aNewShape) {
-                        for (let eachProperty of ['color','position','size']) {
+                        for (let eachProperty of aNewShape.allProperties) {
                             if (aNextShape.areEqualValues(eachProperty,aNextShape[eachProperty],aNewShape[eachProperty])) {
                                 aNextShape.followMaster(eachProperty)
                             }
@@ -630,6 +633,9 @@ class MeasureModel {
             }
         }
     }
+    toJSON() {
+        return {idCount: this.idCount, from: this.from ,to: this.to}
+    }
 }
 
 class ObjectLink {
@@ -675,6 +681,33 @@ class VisualStateModel {
         this.showAllInputEvents = false
         this.timeoutForStopMovingSelectedShapes = undefined
     }
+
+    deleteYourself() {
+        for (let aShapeModel of Object.values(this.shapesDictionary)) {
+            this.deleteShape(aShapeModel)
+        }
+        for (let aMeasure of this.measures) {
+            aMeasure.deleteYourself()
+        }
+        this.previousState = undefined;
+        this.nextState = undefined;
+    }
+
+    toJSON() {
+        let result = {name: this.name}
+        result.shapes = {}
+        let shapesJSON = {}
+        for (let eachShapeKey in this.shapesDictionary) {
+            result.shapes[eachShapeKey] = this.shapesDictionary[eachShapeKey].toJSON()
+        }
+        result.measures = []
+        for (let aMeasure of this.measures) {
+            result.measures.push(aMeasure.toJSON())
+        }
+        result.currentInputEventIndex = globalStore.inputEvents.indexOf(this.currentInputEvent)
+        return result
+    }
+
     get proxy() {
         return new Proxy(this,{
             ownKeys(target) {
@@ -714,7 +747,7 @@ class VisualStateModel {
     }
 
     get allObjectNames() {
-        return this.allObjects.map((o) => o.name)
+        return this.allObjects.map(obj => obj.name)
     }
 
     objectFor(name) {
@@ -774,6 +807,13 @@ class VisualStateModel {
     get currentInputEventIndex() {
         return globalStore.inputEvents.indexOf(this.currentInputEvent)
     }
+    set currentInputEventIndex(anInputEventIndex) {
+        if (anInputEventIndex < 0 || anInputEventIndex >= globalStore.inputEvents.length) {
+            return
+        }
+        this.currentInputEvent = globalStore.inputEvents[anInputEventIndex]
+    }
+
     get percentageInTimeline() {
         if (this.currentInputEventIndex >= 0) {
             let totalEventCount = globalStore.inputEvents.length
@@ -794,7 +834,7 @@ class VisualStateModel {
                 for (let shapeKey in this.shapesDictionary) {
                     if (previousMeasure.from.id == shapeKey) {
                         //This VisualState has the starting Shape so we import the measure
-                        return this.addNewMeasureUntilLastState(previousMeasure.from.type, previousMeasure.from.id, previousMeasure.from.handler, previousMeasure.to.type, previousMeasure.to.id, previousMeasure.to.handler, previousMeasure.cachedFinalPosition)
+                        return this.addNewMeasureUntilLastState(undefined,previousMeasure.from.type, previousMeasure.from.id, previousMeasure.from.handler, previousMeasure.to.type, previousMeasure.to.id, previousMeasure.to.handler, previousMeasure.cachedFinalPosition)
                     }
                 }
                 break;
@@ -803,7 +843,7 @@ class VisualStateModel {
                 for (let aMeasure of this.measures) {
                     if (previousMeasure.from.id == aMeasure.id) {
                         //This VisualState has the starting measure so we import the measure
-                        return this.addNewMeasureUntilLastState(previousMeasure.from.type, previousMeasure.from.id, previousMeasure.from.handler, previousMeasure.to.type, previousMeasure.to.id, previousMeasure.to.handler, previousMeasure.cachedFinalPosition)
+                        return this.addNewMeasureUntilLastState(undefined,previousMeasure.from.type, previousMeasure.from.id, previousMeasure.from.handler, previousMeasure.to.type, previousMeasure.to.id, previousMeasure.to.handler, previousMeasure.cachedFinalPosition)
                     }
                 }
                 break;
@@ -812,7 +852,7 @@ class VisualStateModel {
                 // if (this.currentInputEvent) {
                     // if (this.currentInputEvent.touches.some(aTouch => aTouch.id == previousMeasure.from.id)) {
                         //This VisualState has the starting event so we import the measure
-                        return this.addNewMeasureUntilLastState(previousMeasure.from.type, previousMeasure.from.id, previousMeasure.from.handler, previousMeasure.to.type, previousMeasure.to.id, previousMeasure.to.handler, previousMeasure.cachedFinalPosition)
+                        return this.addNewMeasureUntilLastState(undefined,previousMeasure.from.type, previousMeasure.from.id, previousMeasure.from.handler, previousMeasure.to.type, previousMeasure.to.id, previousMeasure.to.handler, previousMeasure.cachedFinalPosition)
                     // }
                 // }
                 break;
@@ -823,11 +863,19 @@ class VisualStateModel {
         return []
     }
 
-    addNewMeasureUntilLastState(fromEntityType, fromId, fromHandlerName, toEntityType, toId, toHandlerName, cachedFinalPosition) {
+    addNewMeasureUntilLastState(idCount,fromEntityType, fromId, fromHandlerName, toEntityType, toId, toHandlerName, cachedFinalPosition) {
         let result = []
 
+        //TODO what about deleted measures?
+        if (idCount && this.measureFor(idCount)) {
+            return []
+        }
+
         let newMeasure = new MeasureModel(this, { type: fromEntityType, id: fromId, handler: fromHandlerName }, { type: toEntityType, id: toId, handler: toHandlerName }, cachedFinalPosition)
-        newMeasure.idCount = globalStore.measureCounter++;
+        if (!idCount) {
+            idCount = globalStore.measureCounter++;
+        }
+        newMeasure.idCount = idCount;
         result.push(newMeasure)
         this.measures.push(newMeasure)
         if (this.nextState) {
@@ -1074,6 +1122,12 @@ class InputEvent {
         this.timeStamp = timeStamp
         this.testShapes = []
     }
+    deleteYourself() {
+        for (aTestShape of Array.from(this.testShapes)) {
+            aTestShape.prepareForDeletion()
+            this.testShapes.remove(aTestShape)
+        }
+    }
     get leanJSON() {
         //Removing testShapes from the inputEvent
         return {type: this.type, touches: this.touches.map(x => x.leanJSON), changedTouches: this.changedTouches.map(x => x.leanJSON), timeStamp: this.timeStamp }
@@ -1140,7 +1194,7 @@ class InputEventTouch {
     }
 
     get leanJSON() {
-        console.log("InputEventTouch >> " + JSON.stringify({identifier: this.identifier,x: this.x, y: this.y, radiusX: this.radiusX, radiusY: this.radiusY, angularRotation: this.angularRotation, force: this.force }))
+        // console.log("InputEventTouch >> " + JSON.stringify({identifier: this.identifier,x: this.x, y: this.y, radiusX: this.radiusX, radiusY: this.radiusY, angularRotation: this.angularRotation, force: this.force }))
         //TODO check why angularRotation is not appearing, apparently when a value it is undefined cannot be added to the final JSON
         return {identifier: this.identifier, x: this.x, y: this.y, radiusX: this.radiusX, radiusY: this.radiusY, angularRotation: this.angularRotation, force: this.force }
     }
@@ -1740,17 +1794,17 @@ class ShapeModel {
     setOwnPropertiesFromMaster(property) {
         switch (property) {
             case 'color': {
-                this.color = this.color
+                this.color = this.valueForProperty("color")
                 break;
             }
             case 'position': {
-                this.left = this.left.valueOf()
-                this.top = this.top.valueOf()
+                this.left = this.valueForProperty("left")
+                this.top = this.valueForProperty("top")
                 break;
             }
             case 'size':{
-                this.width = this.width.valueOf()
-                this.height = this.height.valueOf()
+                this.width = this.valueForProperty("width")
+                this.height = this.valueForProperty("height")
                 break;
             }
             case '':
@@ -1810,7 +1864,7 @@ class ShapeModel {
         if (value) {
             return value.valueOf()
         }
-        return value;
+        return value
     }
     areEqualValues(property, value1, value2) {
         switch (property) {
@@ -1818,10 +1872,23 @@ class ShapeModel {
                 return value1 == value2;
             }
             case 'position':{
+                if (value1.x == null || value1.x == undefined || Number.isNaN(value1.x) || value1.y == null || value1.y == undefined || Number.isNaN(value1.y)) {
+                    debugger;
+                }
+                if (value2.x == null || value2.x == undefined || Number.isNaN(value2.x) || value2.y == null || value2.y == undefined || Number.isNaN(value2.y)) {
+                    debugger;
+                }
                 return value1.x.valueOf() == value2.x.valueOf() && value1.y.valueOf() == value2.y.valueOf();
             }
             case 'size':{
+                if (value1.width == null || value1.width == undefined || Number.isNaN(value1.width) || value1.height == null || value1.height == undefined || Number.isNaN(value1.height)) {
+                    debugger;
+                }
+                if (value2.width == null || value2.width == undefined || Number.isNaN(value2.width) || value2.height == null || value2.height == undefined || Number.isNaN(value2.height)) {
+                    debugger;
+                }
                 return value1.width.valueOf() == value2.width.valueOf() && value1.height.valueOf() == value2.height.valueOf();
+                // return value1.width.valueOf() == value2.width.valueOf() && value1.height.valueOf() == value2.height.valueOf();
             }
         }
     }
@@ -1904,11 +1971,16 @@ class RectangleModel extends ShapeModel {
     }
 
     fromJSON(json) {
-        // this.id = json.id
-        // this.type = json.type
+        //     this.id = json.id
+        //     this.type = json.type
         for (let eachKey of ['color','top','left','width','height','opacity','cornerRadius']) {
             if (json.hasOwnProperty(eachKey)) {
-                this[eachKey] = json[eachKey]
+                if (this.valueForProperty(eachKey) != json[eachKey]) {
+                    // console.log("RectangleModel >> fromJSON, NOT ignoring " + eachKey + " " + json[eachKey])
+                    this[eachKey] = json[eachKey]
+                }// else {
+                    // console.log("RectangleModel >> fromJSON, ignoring " + eachKey + " " + json[eachKey])
+                // }
             }
         }
     }
@@ -2015,8 +2087,10 @@ class PolygonModel extends ShapeModel {
         }
         return undefined
     }
-    addVertex(canvasPosition) {
-        let vertexId = "V"+this.amountOfVertices
+    addVertex(canvasPosition,vertexId=undefined) {
+        if (!vertexId) {
+            vertexId = "V"+this.amountOfVertices
+        }
         let newVertex = new Vertex(vertexId,canvasPosition)
         Vue.set(this._vertices,vertexId,newVertex)
         Vue.set(this,vertexId,newVertex)
@@ -2113,16 +2187,20 @@ class PolygonModel extends ShapeModel {
         return {id:this.id,type: this.type, color:this.color,position:{x:this.position.x,y:this.position.y},vertices:verticesJSON}
     }
     fromJSON(json) {
-        // this.id = json.id
-        // this.type = json.type
+            // this.id = json.id
+            // this.type = json.type
         if (json.color) {
-            this.color = json.color
+            if (!this.areEqualValues("color",this.color,json.color)) {
+                this.changeOwnProperty("color",json.color)
+            }
         }
         if (json.position) {
-            this.left = json.position.x
-            this.top = json.position.y
+            if (!this.areEqualValues("position",this.position,json.position)) {
+                this.changeOwnProperty("position",json.position)
+            }
         }
         if (json.vertices) {
+            console.log("I might be a problematic piece of code, shame on me")
             for (let vertexKey in json.vertices) {
                 let eachJSONVertex = json.vertices[vertexKey]
                 let vertex = this.vertexFor(eachJSONVertex.id)
@@ -2130,7 +2208,8 @@ class PolygonModel extends ShapeModel {
                     vertex.x = eachJSONVertex.x
                     vertex.y = eachJSONVertex.y
                 } else {
-                    Vue.set(this._vertices,eachJSONVertex.id,new Vertex(eachJSONVertex.id,eachJSONVertex))
+                    this.addVertex(eachJSONVertex,eachJSONVertex.id)
+                    // Vue.set(this._vertices,eachJSONVertex.id,new Vertex(eachJSONVertex.id,eachJSONVertex))
                 }
             }
         }
@@ -2644,6 +2723,14 @@ class State {
         this.isReadyToServe = false
     }
 
+    deleteYourself() {
+        this.machine.states.remove(this);
+        if (this.machine.isServer) {
+            globalStore.socket.emit('message-from-desktop', { type: "MACHINE_DELETED_STATE", id: this.id });
+        }
+        this.machine = undefined;
+    }
+
     get actions() {
         return this.machine.actions;
     }
@@ -2773,7 +2860,7 @@ class Transition {
         this.source = typeof source === "string" ? this.machine.findStateId(source) : source;
         this.target = typeof target === "string" ? this.machine.findStateId(target) : target;
         this._isSelected = isSelected || false;
-        this._isActive = isSelected || false;
+        this._isActive = isActive || false;
         this._guard = guard || function(e) {
 // Only when the guard is true the transition is executed
 return true;
@@ -2787,6 +2874,14 @@ return true;
         this.isActiveTimer = undefined
     }
 
+    deleteYourself() {
+        this.machine.transitions.remove(this);
+        if (this.machine.isServer) {
+            globalStore.socket.emit('message-from-desktop', { type: "MACHINE_DELETED_TRANSITION", id: this.id });
+        }
+        this.machine = undefined;
+    }
+
     get functions() {
         return this.machine.functions
     }
@@ -2927,6 +3022,15 @@ class SMFunction {
 
         this.isReadyToServe = false
     }
+
+    deleteYourself() {
+        this.machine.functions.remove(this)
+        if (this.machine.isServer) {
+            globalStore.socket.emit('message-from-desktop', { type: "MACHINE_DELETED_FUNCTION", id: this.id });
+        }
+        this.machine = undefined;
+    }
+
     get code() {
         return eval(JSONfn.stringify(this.func))
     }
@@ -2988,6 +3092,7 @@ class StateMachine {
     constructor({isServer}) {
         this.states = []
         this.transitions = []
+        this.functions = []
 
         this.event = undefined; //This is the event that we are currently processing
         this._currentState = undefined;
@@ -2996,8 +3101,6 @@ class StateMachine {
         this.isServer = isServer
         // this.hardcodedValues = {}
 
-        this.functions = []
-
         let self = this;
         this.globalScope = new Proxy({}, {
             ownKeys(target) {
@@ -3032,7 +3135,7 @@ class StateMachine {
             },
             get (target, key) {
                 if (isServer) {
-                    let vs = globalStore.visualStates.find((vs) => vs.name == key)
+                    let vs = globalStore.visualStates.find(vs => vs.name == key)
                     if (vs) {
                         return vs.proxy;
                     }
@@ -3049,7 +3152,7 @@ class StateMachine {
                     }
                 }
 
-                let foundFunction = self.functions.find((f) => f.name == key)
+                let foundFunction = self.functions.find(f => f.name == key)
                 if (foundFunction) {
                     return foundFunction.func
                 }
@@ -3058,13 +3161,6 @@ class StateMachine {
             }
         });
 
-        // if (this.isServer) {
-            for (let newFunction of [new SMFunctionIsInside({machine:this}),new SMFunctionMap({machine:this})]) {
-                this.addFunction(newFunction)
-            }
-            this.functions[0].isSelected = true;
-        // }
-
         /***
     Utility functions to keep track of the touches.
     touchInfo[i] is an info record for the i-th finger being put down:
@@ -3089,13 +3185,77 @@ class StateMachine {
     this.firstIndex = -1;    // index of first non-null entry in touchInfo
     }
 
+    initialize() {
+        for (let newFunction of [new SMFunctionIsInside({machine:this}),new SMFunctionMap({machine:this})]) {
+            this.addFunction(newFunction)
+        }
+        this.functions[0].isSelected = true;
+    }
+
+    toJSON() {
+        let result = {}
+        result.functions = []
+        for (let fn of this.functions) {
+            result.functions.push(fn.toJSON())
+        }
+        result.states = []
+        for (let state of this.states) {
+            result.states.push(state.toJSONString())
+        }
+        result.transitions = []
+        for (let transition of this.transitions) {
+            result.transitions.push(transition.toJSONString())
+        }
+        return result
+    }
+
+    fromJSON(json) {
+        for (let array of [this.functions, this.states, this.transitions]) {
+            array.forEach(each => each.prepareForDeletion())
+            array.removeAll()
+        }
+
+        for (let fnString of json.functions) {
+            let functionDescription = JSON.parse(fnString)
+            this.updateFunction(functionDescription,true);
+        }
+
+        for (let stateString of json.states) {
+            let stateDesc;
+            eval(`stateDesc = ${stateString}`);
+            this.insertNewState(stateDesc)
+        }
+
+        for (let transitionString of json.transitions) {
+            let transitionDesc;
+            eval(`transitionDesc = ${transitionString}`);
+            this.insertNewTransition(transitionDesc)
+        }
+    }
+
+    deleteYourself() {
+        this.functions.concat(this.transitions).concat(this.states).forEach(each => {
+            each.deleteYourself()
+        })
+
+        this.event = undefined;
+        this.currentState = undefined;
+        this.firstState = undefined;
+
+        if (this.isServer) {
+            globalStore.socket.emit('message-from-desktop', { type: "MACHINE_DELETED" });
+        }
+    }
+
     get currentState() {
         return this._currentState
     }
 
     set currentState(value) {
         this._currentState = value
-        globalStore.socket.emit('message-from-device', { type:"STATE_MACHINE_STATE", stateId: value.id });
+        if (value) {
+            globalStore.socket.emit('message-from-device', { type:"STATE_MACHINE_STATE", stateId: value.id });
+        }
     }
 
     get accumulatedObjects() {
@@ -3112,15 +3272,15 @@ class StateMachine {
     }
 
     get selectedElement() {
-        let selectedFunction = this.functions.find((f) => f.isSelected)
+        let selectedFunction = this.functions.find(f => f.isSelected)
         if (selectedFunction) {
             return selectedFunction
         }
-        let selectedNode = this.states.find((s) => s.isSelected)
+        let selectedNode = this.states.find(s => s.isSelected)
         if (selectedNode) {
             return selectedNode
         }
-        let selectedTransition = this.transitions.find((s) => s.isSelected)
+        let selectedTransition = this.transitions.find(s => s.isSelected)
         if (selectedTransition) {
             return selectedTransition
         }
@@ -3143,7 +3303,7 @@ class StateMachine {
         // this.measures.push(aMeasure);
 
         if (this.isServer) {
-            globalStore.socket.emit('message-from-desktop', { type: "NEW_MEASURE", message: {idCount: aMeasure.idCount, from: aMeasure.from ,to: aMeasure.to} });
+            globalStore.socket.emit('message-from-desktop', { type: "NEW_MEASURE", message: aMeasure.toJSON() });
         }
     }
 
@@ -3166,7 +3326,7 @@ class StateMachine {
     }
 
     updateFunction(aFunctionJSON,shouldCreate=false) {
-        let foundFunction = this.functions.find((f) => f.id == aFunctionJSON.id)
+        let foundFunction = this.findFunctionId(aFunctionJSON.id)
         if (foundFunction) {
            foundFunction.fromJSON(aFunctionJSON)
         } else {
@@ -3242,15 +3402,19 @@ class StateMachine {
     }
 
     findTransitionsFrom(sourceState,transitionName) {
-        return this.transitions.find((aTransition) => aTransition.source == sourceState && aTransition.name == transitionName)
+        return this.transitions.find(aTransition => aTransition.source == sourceState && aTransition.name == transitionName)
     }
 
     findStateId(stateId) {
-        return this.states.find((aState) => aState.id == stateId)
+        return this.states.find(aState => aState.id == stateId)
     }
 
     findTransitionId(transitionId){
-        return this.transitions.find((aTransition) => aTransition.id == transitionId)
+        return this.transitions.find(aTransition => aTransition.id == transitionId)
+    }
+
+    findFunctionId(functionId) {
+        return this.functions.find(f => f.id == functionId)
     }
 
     notifyChange(type,object,propertyName) {
